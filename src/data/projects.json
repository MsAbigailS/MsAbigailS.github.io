[
    {
        "title": "Job Application Tracker",
        "description": "This Job Application Tracker uses MongoDB, Express, Vue, Vite, Axios, and Bootstrap to store, retrieve, and show user job applications in a simple, clean hub. Inspired by my own job search, this application allows users to track their job applications while also allowing me to work on my own skills.",
        "summary": "Job application tracker",
        "technologies": [
            "MongoDB",
            "Vue",
            "Vite",
            "Bootstrap",
            "Express",
            "Axios",
            "Figma"
        ],
        "completed": "In Progress",
        "demo": "https://github.com/MsAbigailS/JobTracker",
        "imgs": [
            {
                "resource": "jobTracker/Buildlog_06_05_2025_Client_1.png",
                "alt": "Initial client-side test"
            },
            {
                "resource": "jobTracker/Buildlog_06_05_2025_Client_Axios_1.png",
                "alt": "Axios to connect client to server"
            },
            {
                "resource": "jobTracker/Buildlog_06_05_2025_Figma_Components_1.png",
                "alt": "Figma MVP Components"
            },
            {
                "resource": "jobTracker/Buildlog_06_05_2025_Figma_Desktop_1.png",
                "alt": "Figma MVP Desktop"
            },
            {
                "resource": "jobTracker/Buildlog_06_05_2025_Figma_Desktop_2.png",
                "alt": "Figma MVP Desktop"
            },
            {
                "resource": "jobTracker/Buildlog_06_05_2025_Figma_Mobile_1.png",
                "alt": "Figma MVP Mobile"
            },
            {
                "resource": "jobTracker/Buildlog_06_05_2025_Figma_Mobile_2.png",
                "alt": "Figma MVP Mobile"
            },
            {
                "resource": "jobTracker/Buildlog_06_05_2025_Server_MongoDB_2.png",
                "alt": "MongoDB cluster snapshot"
            },
            {
                "resource": "jobTracker/Buildlog_06_05_2025_Server_Schema_1.png",
                "alt": "Mongoose schema to control MongoDB documents"
            }
        ],
        "challenges": [
            "Switching from React + Tailwind CSS to Vue + Bootstrap was an adjustment, but it illuminated the strengths of each combination"
        ],
        "awards": [],
        "personalNotes": "I was interested in revisiting MongoDB and Vue, and in the midst of applying to jobs and becoming frustrated with how other applications would not allow me the flexibility to add in the notes and fields I wanted to track, I decided to create my own job application tracker. This way I would be able to explore MongoDB and Vue while also creating a solution to my problem.",
        "links": [
            {
                "name": "GitHub Repo",
                "url": "https://github.com/MsAbigailS/JobTracker"
            }
        ],
        "buildLog": [
            {
                "date": "2025/06/05",
                "time": "22:00",
                "summary": "Setup and tested server and client connection. Also started working on Figma MVP design.",
                "updates": [
                    {
                        "type": "Added",
                        "description": "Created a MongoDB cluster. Thank goodness for free tiers.",
                        "images": [
                            {
                                "resource": "jobTracker/Buildlog_06_05_2025_Server_MongoDB_2.png",
                                "alt": "MongoDB cluster snapshot"
                            }
                        ],
                        "personalNotes": "It had been awhile since I had used MongoDB, so it took a minute to learn where everything was on the website. This is a great reminder that you have to keep up with these technologies."
                    },
                    {
                        "type": "Added",
                        "description": "Created Jobs table schema using Mongoose.",
                        "images": [
                            {
                                "resource": "jobTracker/Buildlog_06_05_2025_Server_Schema_1.png",
                                "alt": "Snapshot of schema definition"
                            }
                        ],
                        "personalNotes": "Even though MongoDB is schema-less, I still wanted control over the data for the jobs table. One reason I decided to make this project was because I wanted to be able to track my applications with the information I wanted, which changed between applications (i.e. saving cover letters, saving written responses, etc.), but I decided to go with schema control because I know there are values I'm always going to want to track, such as the role name, the company, location, and more. As I progress in this project, I can take advantage of the schema-less nature of MongoDB to add in new fields as I need them."
                    },
                    {
                        "type": "Added",
                        "description": "Pushed some test data via local server terminal.",
                        "images": [
                            {
                                "resource": "jobTracker/Buildlog_06_05_2025_Server_MongoDB_2.png",
                                "alt": "Snapshot of test data"
                            }
                        ],
                        "personalNotes": "As always, I needed to test that my server was connecting to MongoDB correctly, so I did so by using my server to push some test data."
                    },
                    {
                        "type": "Added",
                        "description": "Setup my client-side Vue app and connected to server-side using Axios.",
                        "images": [
                            {
                                "resource": "jobTracker/Buildlog_06_05_2025_Client_1.png",
                                "alt": "Snapshot of rendered table pulling from MongoDB"
                            }
                        ],
                        "personalNotes": "I decided to use Vue + Vite + Bootstrap to strengthen my coding arsenal. I'm a huge fan of React, but I know Vue is loved for a reason, so I figured this is a great time to get some Vue experience in. Here I'm just checking that my client-side is communicating with my server-side."
                    },
                    {
                        "type": "Added",
                        "description": "Created a Figma MVP design.",
                        "images": [
                            {
                                "resource": "jobTracker/Buildlog_JobTracker_06_05_2025_Mobile_Video.gif",
                                "alt": "Gif of Figma MVP Mobile transitions"
                            },
                            {
                                "resource": "jobTracker/Buildlog_JobTracker_06_05_2025_Desktop_Video.gif",
                                "alt": "Gif of Figma MVP Desktop transitions"
                            },
                            {
                                "resource": "jobTracker/Buildlog_06_05_2025_Figma_Components_1.png",
                                "alt": "Snapshot of Figma MVP components"
                            },
                            {
                                "resource": "jobTracker/Buildlog_06_05_2025_Figma_Desktop_1.png",
                                "alt": "Snapshot of Figma MVP Desktop design"
                            },
                            {
                                "resource": "jobTracker/Buildlog_06_05_2025_Figma_Desktop_2.png",
                                "alt": "Snapshot of Figma MVP Desktop design"
                            },
                            {
                                "resource": "jobTracker/Buildlog_06_05_2025_Figma_Mobile_1.png",
                                "alt": "Snapshot of Figma MVP Mobile design"
                            },
                            {
                                "resource": "jobTracker/Buildlog_06_05_2025_Figma_Mobile_2.png",
                                "alt": "Snapshot of Figma MVP Mobile design"
                            }
                        ],
                        "personalNotes": "I decided to use Figma to design the MVP front-end for this project. I knew at the least I wanted to be able to read and write data."
                    }
                ]
            },
            {
                "date": "2025/06/06",
                "time": "22:00",
                "summary": "Implemented Figma MVP and setup adding job.",
                "updates": [
                    {
                        "type": "Updated",
                        "description": "Implemented Figma MVP components.",
                        "images": [
                            {
                                "resource": "jobTracker/Buildlog_JobTracker_06_06_2025_Mobile_Video.gif",
                                "alt": "MVP implementation"
                            }
                        ],
                        "personalNotes": "Going from React + Tailwind CSS to Vue + Bootstrap definitely slowed down my development, but it was a nice challenge. I can see why some devs love bootstrap, especially since it takes a lot of the setup for common components out. My goal here was to setup my MVP with working connections to MongoDB. My next goal is to have strict inputs for adding a job."
                    }
                ]
            },
            {
                "date": "2025/06/07",
                "time": "22:00",
                "summary": "Implemented data validation and transitions.",
                "updates": [
                    {
                        "type": "Updated + Fixed",
                        "description": "Implemented data validation and created table view on desktop.",
                        "images": [
                            {
                                "resource": "jobTracker/Buildlog_JobTracker_06_07_2025_Desktop_Video.gif",
                                "alt": "Desktop view"
                            },
                            {
                                "resource": "jobTracker/Buildlog_JobTracker_06_07_2025_Mobile_Video.gif",
                                "alt": "Mobile view"
                            }
                        ],
                        "personalNotes": "Late last night, I decided to turn of Co-Pilot, and honestly, my development speed has increased. I implemented data validation for input to facilitate a match between user input values and the Mongoose schema. I also re-evaluated my design choice to use the same cards between mobile and desktop and realized my original idea of having two different components geared towards different view ports would be the best approach. I also fixed my page to pull the jobs after posting a new job to show the newly added document in the UI."
                    },
                    {
                        "type": "Updated",
                        "description": "Implemented transitions.",
                        "images": [
                            {
                                "resource": "jobTracker/Buildlog_JobTracker_06_07_2025_Mobile_Transitions_Video.gif",
                                "alt": "Transitions on mobile"
                            }
                        ],
                        "personalNotes": "I love a good transition, and even now I felt the need to implement at least a simple one to have the card for adding a job appear and have the view scroll back to the top of the page when cancelling an add."
                    }
                ]
            },
            {
                "date": "2025/06/09",
                "time": "22:00",
                "summary": "Created full card view and edit features.",
                "updates": [
                    {
                        "type": "Updated",
                        "description": "Implemented full card view and edit features.",
                        "images": [
                            {
                                "resource": "jobTracker/Buildlog_JobTracker_06_09_2025_Desktop_Video.gif",
                                "alt": "Desktop view"
                            },
                            {
                                "resource": "jobTracker/Buildlog_JobTracker_06_09_2025_Mobile_Video.gif",
                                "alt": "Mobile view"
                            },
                            {
                                "resource": "jobTracker/Buildlog_JobTracker_06_09_2025_Mobile_Network_Video.gif",
                                "alt": "Mobile view showing API success"
                            }
                        ],
                        "personalNotes": "I decided to create a view to show all fields of an application using a modal setup. I also decided to implement updating documents, also as a modal. There are some things I can do to make this more efficient, but that will be for tomorrow!"
                    }
                ]
            },
            {
                "date": "2025/06/10",
                "time": "22:00",
                "summary": "Abstracted out input logic and improved validation.",
                "updates": [
                    {
                        "type": "Updated",
                        "description": "Abstracted out input logic and improved validation, implmented deletes, and created status badges.",
                        "images": [
                            {
                                "resource": "jobTracker/Buildlog_JobTracker_06_10_2025_Desktop_Video.gif",
                                "alt": "Desktop view"
                            },
                            {
                                "resource": "jobTracker/Buildlog_JobTracker_06_10_2025_Mobile_Video.gif",
                                "alt": "Mobile view"
                            }
                        ],
                        "personalNotes": "In making things more efficient, I abstracted out some repetative logic for my inputs, reducing redundancy. With this, I also improved validation for editing an application by resetting a value if the input becomes blank to what it had originally be (i.e. if an application had role \"SWE II\" and the user types, but changes their mind and clears the field, the original role of \"SWE II\" will be honored. There's some more cleanup to be done here, but it shouldn't be difficult. I also decided to change which information would be shown on the summary level. I also implemented a delete feature for applications and created badges for status."
                    }
                ]
            }
        ],
        "caseStudy": {
            "overview": "This project is a web app designed to help users keep track of their job applications. Built using TypeScript, Vue, and MongoDB, it helps users clearly keep track of their job applications with the ability to create custom fields (i.e. track which resume was used, cover letters, and more)",
            "problem": "Traditional methods for keeping track of job applications, such as spreadsheets and word documents, are unwieldy and lack scalability to include the features users may want to track.",
            "solution": "To address this, I built a SPA with Vue + Express, allowing users to add and manage job applications through a clean interface. Vue + Bootstrap were chosen for fast, interactive UI while Express handles backend logic to MongoDB.",
            "keyFeatures": [
                "Add new job application entries",
                "Edit job application entries",
                "Remove job application entires",
                "Summary table and cards for job application entires",
                "Expanded cards for job application entires"
            ],
            "outcomes": [],
            "lessons": [
                {
                    "challenge": "Adjusting to Vue + Bootstrap after working with React + Tailwind CSS for so long",
                    "lesson": "The contrast helped solidify the strengthes of Vue + Bootstrap vs React + Tailwind CSS."
                }
            ],
            "conclusion": ""
        }
    },
    {
        "title": "MedMate",
        "description": "MedMate is a personal health management application that utilizes AI to assist users in understanding their medical prescriptions and maintaining health records. The app features voice recording and summarization of doctor consultations, providing users with accessible and organized health information.",
        "summary": "Health management application",
        "technologies": [
            "React Native",
            "Python",
            "Flask",
            "GPT"
        ],
        "completed": "2023/10/08",
        "demo": "https://devpost.com/software/healai-v7o852",
        "imgs": [
            {
                "resource": "MedMate1.jpg",
                "alt": "Login page"
            },
            {
                "resource": "MedMate2.jpg",
                "alt": "Sign up page"
            },
            {
                "resource": "MedMate3.jpg",
                "alt": "Smart search"
            },
            {
                "resource": "MedMate4.jpg",
                "alt": "Smart search"
            },
            {
                "resource": "MedMate5.jpg",
                "alt": "Smart search"
            },
            {
                "resource": "MedMate6.jpg",
                "alt": "Welcome page"
            },
            {
                "resource": "MedMate7.jpg",
                "alt": "Smart recording"
            },
            {
                "resource": "MedMate8.jpg",
                "alt": "Smart recording"
            },
            {
                "resource": "MedMate9.jpg",
                "alt": "Smart recording"
            },
            {
                "resource": "MedMate10.jpg",
                "alt": "Smart recording"
            },
            {
                "resource": "MedMate11.jpg",
                "alt": "User profile"
            },
            {
                "resource": "MedMate12.jpg",
                "alt": "Calendar view"
            },
            {
                "resource": "MedMate13.jpg",
                "alt": "Prescription page"
            },
            {
                "resource": "MedMate14.jpg",
                "alt": "Adding a new prescription"
            },
            {
                "resource": "MedMate15.jpg",
                "alt": "Adding a new prescription"
            },
            {
                "resource": "MedMate16.jpg",
                "alt": "Personal notes"
            }
        ],
        "complexity": "Intermediate",
        "challenges": [
            "Integrating AI-driven summarization for medical consultations.",
            "Ensuring data privacy and security for sensitive health information."
        ],
        "pride": 5,
        "awards": [
            {
                "key": "Axxess Hackathon 2023",
                "values": [
                    "1st Place Overall"
                ]
            }
        ],
        "personalNotes": "One of my favorite hackathon projects. I learned a lot about mutli-tasking in a condensed time frame. I also learned a lot about the importance of user experience.",
        "links": [
            {
                "name": "Demo",
                "url": "https://devpost.com/software/healai-v7o852"
            },
            {
                "name": "GitHub Repo",
                "url": "https://github.com/NicholasZolton/AxxessHackathonApp2023"
            }
        ],
        "buildLog": null,
        "caseStudy": {
            "overview": "This project is a React Native mobile application using Expo Go designed to help users keep gain control over their medical needs. Built using React, Flask, and OpenAI, it helps users translate and summarize audio from appointments, summarize prescription risks, and reminds users to take their medication",
            "problem": "Often patients leave medical visits forgetting the exact details discussed or simply need help understanding their medications' risks. We decided to create and all-in-one stop to solve these issues.",
            "solution": "This project summarizes key talking points from doctor conversations using AI, provides clear explanations of prescribed medications, and oofers a prescription tracker. By using Expo Go, we were able to make this application fit in user's pockets.",
            "keyFeatures": [
                "AI summarization of conversations with doctors",
                "AI translation between 40+ languages",
                "Prescription explanations",
                "Prescription reminders"
            ],
            "outcomes": [
                "🏆 Winner Overall at Axxess Hackathon 2023",
                "Successfully built MVP in 16 hours",
                "Learned more about Expo Go",
                "Created a cool tool to help others manage their health"
            ],
            "lessons": [
                {
                    "challenge": "Originally, the goal was to use RFID to help track medical records, but the project goal's pivoted in response to hardware issues",
                    "lesson": "Resillience in the face of change."
                }
            ],
            "conclusion": "This project enhanced my skills in mobile-first development, AI integration, and fast-paced problem-solving under time constraints."
        }
    },
    {
        "title": "Redwood",
        "description": "Redwood is a web app that transforms academic materials and PDFs into interactive learning trees. Users can upload textbooks or papers as PDFs and see how concepts build on each other while exploring further with an AI chat assistant focused on the material presented.",
        "summary": "EdTech application",
        "technologies": [
            "Svelte",
            "Node.js",
            "Python",
            "TypeScript",
            "OpenAI",
            "Spacy",
            "FAST API"
        ],
        "completed": "2023/10/08",
        "demo": "https://devpost.com/software/redwood",
        "imgs": [
            {
                "resource": "Redwood1.jpg",
                "alt": "Homepage"
            },
            {
                "resource": "Redwood2.jpg",
                "alt": "Uploading material"
            },
            {
                "resource": "Redwood3.jpg",
                "alt": "Selecting material"
            },
            {
                "resource": "Redwood4.jpg",
                "alt": "Generating learning tree"
            },
            {
                "resource": "Redwood5.jpg",
                "alt": "Tree populated and initial prompt"
            },
            {
                "resource": "Redwood6.jpg",
                "alt": "Zooming into tree"
            },
            {
                "resource": "Redwood7.jpg",
                "alt": "Searching for node for ease of access"
            },
            {
                "resource": "Redwood8.jpg",
                "alt": "Node located"
            },
            {
                "resource": "Redwood9.jpg",
                "alt": "Double clicking on node to show summary and tutor"
            },
            {
                "resource": "Redwood10.jpg",
                "alt": "Asking first question"
            },
            {
                "resource": "Redwood11.jpg",
                "alt": "Asking second question"
            },
            {
                "resource": "Redwood12.jpg",
                "alt": "After clicking 'I Understand' button"
            }
        ],
        "complexity": "Intermediate",
        "challenges": [],
        "pride": 4,
        "awards": [],
        "personalNotes": "I'm proud of this full-stack project! By combining reconstructed algorithms to extract key concepts for a variety of use cases with dynamic, engaging UI, I was able to strengthen my full-stack development skills.",
        "links": [
            {
                "name": "Demo",
                "url": "https://devpost.com/software/redwood"
            },
            {
                "name": "GitHub Repo",
                "url": "https://github.com/hampster2018/HackPrinceton"
            }
        ],
        "buildLog": null,
        "caseStudy": {
            "overview": "Redwood is a web app that transforms academic materials and PDFs into interactive learning trees. Users can upload textbooks or papers as PDFs and see how concepts build on each other while exploring further with an AI chat assistant focused on the material presented.",
            "problem": "Academic texts are rich and overwhelming. Users looking to learn should not be hindered by the complexity of a given text.",
            "solution": "This project extracts key terms and builds a directed learning graph, helping users visualize the progress of concepts.",
            "keyFeatures": [
                "Learning tree visualization",
                "Interactive learning tree nodes",
                "Search and zoom feature to quickly find concepts",
                "Ability to mark concepts as 'learned'",
                "Color coordination to distinguish 'learned' from 'still learning' concepts",
                "Summarization and AI tutor",
                "Study schedule generator"
            ],
            "outcomes": [
                "🏆 Runner up at HackPrinceton 2023",
                "Successfully deployed the app via Amplify",
                "Fully functional MVP build in 48 hours",
                "Enabled interactive learning from PDF materials"
            ],
            "lessons": [
                {
                    "challenge": "Scaling keyword extraction for large documents; limited by GPU power",
                    "lesson": "Reduced some overhead by using Docker and loaned GPU online, but system limitations can still shape algorithm design"
                }
            ],
            "conclusion": "This project enhanced my skills in data processing pipelines, AI/NLP integration, and interactive graph UIs."
        }
    },
    {
        "title": "The Greenhouse Mission",
        "description": "The Greenhouse Mission is a mobile application that assists users in reducing their carbon footprint by optimizing daily tasks. Utilizing AI, it schedules activities like shopping and laundry during times that minimize environmental impact.",
        "summary": "",
        "technologies": [
            "React Native",
            "Python",
            "Flask",
            "Svelte",
            "JavaScript",
            "Jupyter Notebook"
        ],
        "completed": "2023/10/08",
        "demo": "https://devpost.com/software/the-greenhouse-mission",
        "imgs": [
            {
                "resource": "GreenhouseMission1.jpg",
                "alt": "0 Login page"
            },
            {
                "resource": "GreenhouseMission2.jpg",
                "alt": "1 Calendar"
            },
            {
                "resource": "GreenhouseMission3.jpg",
                "alt": "2 Leaderboard"
            },
            {
                "resource": "GreenhouseMission4.jpg",
                "alt": "3 Current points and inspiration message"
            },
            {
                "resource": "GreenhouseMission5.jpg",
                "alt": "4 Heatmap for success"
            },
            {
                "resource": "GreenhouseMission6.jpg",
                "alt": "5 Weekly points distribution"
            },
            {
                "resource": "GreenhouseMission7.jpg",
                "alt": "6 To-do list"
            },
            {
                "resource": "GreenhouseMission8.jpg",
                "alt": "7 To-do list"
            },
            {
                "resource": "GreenhouseMission9.jpg",
                "alt": "8 Donation page"
            },
            {
                "resource": "GreenhouseMission10.jpg",
                "alt": "9 Smarthome page"
            },
            {
                "resource": "GreenhouseMission11.jpg",
                "alt": "10 Event 1"
            },
            {
                "resource": "GreenhouseMission12.jpg",
                "alt": "11 Event 2"
            },
            {
                "resource": "GreenhouseMission13.jpg",
                "alt": "12 Event 3"
            },
            {
                "resource": "GreenhouseMission14.jpg",
                "alt": "13 Awarding points"
            }
        ],
        "complexity": "Intermediate",
        "challenges": [
            "Designing AI algorithms that effectively reduce carbon emissions.",
            "Integrating user-friendly interfaces for environmental impact feedback."
        ],
        "pride": 4,
        "awards": [
            {
                "key": "Hack Rice 2023",
                "values": [
                    "2nd Place SLB Challenge",
                    "Best Tech Domain"
                ]
            }
        ],
        "personalNotes": "This project took multiple twists and turns, but in the end, I'm proud of the final product. Sleep deprived from traveling to the hackathon and from working on the project, I learned the importance of clear and consistent communication with my team as roadblocks and solutions arrive.",
        "links": [
            {
                "name": "Demo",
                "url": "https://devpost.com/software/the-greenhouse-mission"
            },
            {
                "name": "GitHub Repo",
                "url": "https://github.com/hampster2018/HackRice"
            }
        ],
        "buildLog": null,
        "caseStudy": {
            "overview": "This project is a mobile application using Expo Go that helps users reduce their carbon footprint by optimizing daily tasks. Utilizing AI, it intelligently schedules activites like shopping and laundry during times that minimize environmental impact.",
            "problem": "Sustainability requires a plan, but often times users don't realize that the timing of their daily routine has an impact on their emission footprint.",
            "solution": "This project recommends optimal times for daily tasks using an AI-powered scheduler that considers energy usage, carbon cost, and user availability. It presents a simple, actionable plan and tracks environmental impact by rewarding the user for achieving environmental goals.",
            "keyFeatures": [
                "Smart scheduling with AI-suggested timing for everyday tasks",
                "Impact tracking via points that users can trade",
                "Visual reminders via dashboard of upcoming tasks",
                "Voice input for creating plans"
            ],
            "outcomes": [
                "🏆 2nd Place in SLB Challenge at Hack Rice 2023",
                "🏆 1st Place for Best Tech Domain",
                "Motivated sustainable actions for users"
            ],
            "lessons": [
                {
                    "challenge": "Building a reliable AI scheduler on a tight timeline",
                    "lesson": "Balancing data complexity with mobile UI simplicity requires exploring meaningful datasets and translating key concepts to UI components."
                }
            ],
            "conclusion": "This project enhanced my skills in AI-driven scheduling and UX-focused sustainability design."
        }
    },
    {
        "title": "Amelia",
        "description": "Amelia is an automated voice assistant that proactively notifies users about their vehicle's maintenance needs. By combining road data with AI voice technologies, it makes preventative car care accessible through natural voice interactions, ensuring users stay safe and informed without lifting a finger.",
        "summary": "",
        "technologies": [
            "GPT",
            "ElevenLabs",
            "Google Voice",
            "Python",
            "React Native",
            "Twilio"
        ],
        "completed": "2023/10/08",
        "demo": "https://devpost.com/software/blinkedin-mqo4rp",
        "imgs": [
            {
                "resource": "Amelia1.jpg",
                "alt": "Dashboard"
            },
            {
                "resource": "Amelia2.jpg",
                "alt": "Text message notifications"
            },
            {
                "resource": "Amelia3.jpg",
                "alt": "AI assistant console output"
            }
        ],
        "complexity": "Intermediate",
        "challenges": [
            "Piping audio from a real phone call into the Whisper API due to Google Voice limitations.",
            "Training a good model with mocked data was difficult due to how the data was generated."
        ],
        "pride": 5,
        "awards": [
            {
                "key": "Hack UTA",
                "values": [
                    "2nd Place Overall"
                ]
            }
        ],
        "personalNotes": "At the catalyst of prompt engineering, our team was able to create a product that was not only functional, but practical. I learned a lot about the impact prompt engineering has on the final product.",
        "links": [
            {
                "name": "Demo",
                "url": "https://devpost.com/software/blinkedin-mqo4rp"
            },
            {
                "name": "GitHub Repo",
                "url": "https://github.com/TimothyNaumov/HackUTA2023-Dashboard"
            }
        ],
        "buildLog": null,
        "caseStudy": {
            "overview": "This project is a preventative maintenance assistant for your vehicle. By combining driver behavior data with predictive modeling, Amelia detects when vehicle components are due for attention before something goes wrong. Through AI-generated alerts and a conversation phone call with Amelia, this project helps users stay on top of critical vehicle maintenance.",
            "problem": "Preventative maintenance is not significantly cheaper than repairs, but improves driver safety in the long run; however, most drivers are unaware of how their driving impacts the maintenance requirements for their vehicle.",
            "solution": "This project features two core capailities. First, it provides real-time maintenance alerts by analyzing post-drive data to predict possible maintenance needs. Second, Amelia will send a text to the user inviting them to give her a call. Once on the line, Amelia will explain the issue and recommend maintenance based on user vehicle.",
            "keyFeatures": [
                "Predictive modeling based on driving data",
                "Maintenance countdown estimates",
                "Personalized alerts sent via SMS",
                "Voice hotline powered by GPT + ElevenLabs",
                "Feedback loop to log maintenance for future model predictions"
            ],
            "outcomes": [
                "🏆 2nd Place Overall at HackUTA 2023",
                "Built a fully functional E2E system",
                "AI-enhanced voice support provides natural, educational feedback",
                "Delivered product in 18 hours"
            ],
            "lessons": [
                {
                    "challenge": "Google Voice would not suppoprt answering-machine-style automation",
                    "lesson": "Engineered a virtual audio stream to Whisper."
                }
            ],
            "conclusion": "This project enhanced my skills working with real-time audio, integrating AI voice services, and designing meaningful automation for real-world problems."
        }
    },
    {
        "title": "Site-in-Site",
        "description": "Site-in-Site is a browser extension that enables users to embed one website within another, facilitating seamless multitasking and enhanced productivity. The extension leverages modern web technologies to create a dynamic and interactive user experience.",
        "summary": "",
        "technologies": [
            "Flask",
            "Google Maps API",
            "R",
            "Svelte",
            "TensorFlow",
            "JavaScript",
            "Python",
            "TypeScript",
            "Jupyter Notebook"
        ],
        "completed": "2023/10/08",
        "demo": "https://devpost.com/software/site-in-site",
        "imgs": [
            {
                "resource": "Site-in-Site1.jpg",
                "alt": "Summary page"
            },
            {
                "resource": "Site-in-Site2.jpg",
                "alt": "Home page"
            }
        ],
        "complexity": "Intermediate",
        "challenges": [
            "Implementing secure cross-origin communication between embedded sites.",
            "Ensuring responsive design within nested iframes."
        ],
        "pride": 4,
        "awards": [
            {
                "key": "WEHack UTD",
                "values": [
                    "2nd Place CBRE Challenge"
                ]
            }
        ],
        "personalNotes": "One of my first hackathon projects! This was the day our team decided we would not repeat ideas and everyone had to learn something new. This was my first time using Svelte to create a responsive application.",
        "links": [
            {
                "name": "Demo",
                "url": "https://devpost.com/software/site-in-site"
            },
            {
                "name": "GitHub Repo",
                "url": "https://github.com/hampster2018/WEHack-2023"
            }
        ],
        "buildLog": null,
        "caseStudy": {
            "overview": "This project is a SPA real estate tool that makes investment insights accessible to both newcomers and experts. Powered by a custom-trained ML model, it allows users to quickly estimate the value of selected properties - or even input their own - and receive an instant valuation based on local income and housing data",
            "problem": "The real estate market is a quick-moving industry where individuals with limited real estate experience may become overwhelmed trying to understand the value of a property.",
            "solution": "This project empowers users to choose a city and view investment-recommended properties on a map, receive an instant summary and valuation of each property, and enter custom property details for real-time ML-based price predictions.",
            "keyFeatures": [
                "Google Maps integration with ML-selected properties",
                "Instant value estimation via in-house machine learning model",
                "Property form for custom user input",
                "Responsive frontend build with Svelte",
                "Live model prediction via Flask"
            ],
            "outcomes": [
                "🏆 2nd Place CBRE Challenge at WEHack 2023",
                "Built a fully functional, data-driven MVP in 24 hours"
            ],
            "lessons": [
                {
                    "challenge": "Small dataset with regional bias",
                    "lesson": "The value of data cleansing and dimensionality reduction."
                }
            ],
            "conclusion": "This project provided hands-on experience turing raw data into actionable, real-world insights through ML."
        }
    },
    {
        "title": "Dunk Dynasty",
        "description": "Dunk Dynasty is an interactive platform that enhances the basketball viewing experience by allowing fans to place real-time bets on game events. The system uses AI to generate dynamic prompts and maintains a leaderboard to foster community engagement.",
        "summary": "",
        "technologies": [
            "AWS",
            "Flask",
            "Python",
            "JavaScript",
            "React",
            "Svelte",
            "TensorFlow"
        ],
        "completed": "2023/10/08",
        "demo": "https://devpost.com/software/dunk-dynasty",
        "imgs": [
            {
                "resource": "DunkDynasty1.jpg",
                "alt": "Home page for a given user"
            },
            {
                "resource": "DunkDynasty2.jpg",
                "alt": "Admin console"
            },
            {
                "resource": "DunkDynasty3.jpg",
                "alt": "Assisting new basketball fans with basketball terms"
            },
            {
                "resource": "DunkDynasty4.jpg",
                "alt": "Betting screen"
            },
            {
                "resource": "DunkDynasty5.jpg",
                "alt": "Example of user placing a bet"
            },
            {
                "resource": "DunkDynasty6.jpg",
                "alt": "When a user skips a bet they get an animation"
            },
            {
                "resource": "DunkDynasty7.jpg",
                "alt": "Options for a user when choosing a bet"
            },
            {
                "resource": "DunkDynasty8.jpg",
                "alt": "Leadership for points"
            },
            {
                "resource": "DunkDynasty9.jpg",
                "alt": "Players can trade their points for merch"
            },
            {
                "resource": "DunkDynasty10.jpg",
                "alt": "Buying merch"
            },
            {
                "resource": "DunkDynasty11.jpg",
                "alt": "Once a user gets a swag item"
            }
        ],
        "complexity": "Intermediate",
        "challenges": [
            "Developing real-time betting algorithms synchronized with live game data.",
            "Creating an engaging user interface that updates dynamically during games."
        ],
        "pride": 4,
        "awards": [],
        "personalNotes": "This project took a variety of twists and turns, but in the end, a cohesive produce was creted. This project was a great example of how scope creep can be avoided by clearly communicating with your team and recognizing the strengths and weaknesses of each member.",
        "links": [
            {
                "name": "Demo",
                "url": "https://devpost.com/software/dunk-dynasty"
            },
            {
                "name": "GitHub Repo",
                "url": "https://github.com/MsAbigailS/HackAI"
            }
        ],
        "buildLog": null,
        "caseStudy": {
            "overview": "This project is a multi-layered sports engagement app that gamifies live basketball games through AI-powered bets and community interactions. Users earn and wager digital points on live or pre-game predictions. Backed by a classification neural network and generative AI, this app creates a dynamic, data-driven betting experience integrated with merch rewards.",
            "problem": "Fans often predict game events informally -- like MVPs or scoring leaders -- but lack a structured way to participate in real-time while earning rewards.",
            "solution": "This project empowers users to earn digital points, enter two types of bets (pre-game and live) with assistance from a neural net providing win probabilities, and a built in chatbot to help all viewers understand the game better.",
            "keyFeatures": [
                "AI-generated bet prompts",
                "Classification neural net predicts game outcomes in real-time",
                "User friendly chatbot geared towards helping everyone understand the game",
                "Point system for swag redemption and leaderboard",
                "Admin and user applications to control when betting takes place"
            ],
            "outcomes": [
                "Completed full integration between three tech stacks",
                "Built a working MVP in 24 hours",
                "Enabled an experience that enhances the game rather than distract from it"
            ],
            "lessons": [
                {
                    "challenge": "Scope creep",
                    "lesson": "Prioritize features due."
                }
            ],
            "conclusion": "This project enhanced my skills in working across tech stacks for the same project and on developing neural networks."
        }
    },
    {
        "title": "Model Maintenance",
        "description": "Model Maintenance is a 3D visualization tool designed to monitor and predict maintenance needs in building systems. By analyzing sensor data through machine learning models, it provides real-time insights and alerts for preventative maintenance.",
        "summary": "",
        "technologies": [
            "Three.js",
            "Python",
            "Flask",
            "Machine Learning",
            "Jupyter Notebook",
            "Svelte"
        ],
        "completed": "2023/10/08",
        "demo": "https://devpost.com/software/model-maintenance",
        "imgs": [
            {
                "resource": "ModelMaintenance1.jpg",
                "alt": "3D representation of a building"
            },
            {
                "resource": "ModelMaintenance10.jpg",
                "alt": "3D representation dashboard"
            },
            {
                "resource": "ModelMaintenance3.jpg",
                "alt": "Dashboard 6"
            },
            {
                "resource": "ModelMaintenance4.jpg",
                "alt": "Dashboard 2"
            },
            {
                "resource": "ModelMaintenance5.jpg",
                "alt": "Dashboard 4"
            },
            {
                "resource": "ModelMaintenance6.jpg",
                "alt": "Dashboard 5"
            },
            {
                "resource": "ModelMaintenance7.jpg",
                "alt": "Dashboard 3"
            },
            {
                "resource": "ModelMaintenance8.jpg",
                "alt": "Dashboard 8"
            },
            {
                "resource": "ModelMaintenance9.jpg",
                "alt": "Dashboard 7"
            },
            {
                "resource": "ModelMaintenance2.jpg",
                "alt": "Dashboard 1"
            }
        ],
        "complexity": "Advanced",
        "challenges": [
            "Processing and visualizing complex sensor data in a 3D environment.",
            "Developing predictive models for various building maintenance scenarios."
        ],
        "pride": 5,
        "awards": [],
        "personalNotes": "Such a fun project! This project showcases the importance of data quality and the impact it has on the final product. This was also the first time I had used 3D modeling in a project.",
        "links": [
            {
                "name": "Demo",
                "url": "https://devpost.com/software/model-maintenance"
            },
            {
                "name": "GitHub Repo",
                "url": "https://github.com/MsAbigailS/HackSMU"
            }
        ],
        "buildLog": null,
        "caseStudy": {
            "overview": "This project is a smart building monitoring platform that leverages immersive 3D models and machine learning to optimize facility maintenance. It enables real-time insights into critical system like elevators and HVAC systems by visualizing failure points and prioritizing tasks.",
            "problem": "Maintaining large buildings involves tracking dozens of systems and responding to issues in a timely manner. Traditional systems fail to offer visual feedback nor effectively prioritize tasks.",
            "solution": "This project empowers users to visualize system status via 3D models, prioritize tasks based on severity, recieve SMS alerts when issues are detected, and provides a pipeline-styles ticketing page for workflow management.",
            "keyFeatures": [
                "Dynamic 3D visualization of the building, updated in real-time",
                "Predictie maintenance via ML-based fault detection",
                "SMS alerts for urgent issues and maintenance reminders",
                "Service pipeline interface for tracking and managing maintenance tasks"
            ],
            "outcomes": [
                "Successfully built and deployed a model tailored to HVAC/elevator diagnostics",
                "Created an immersive and intuitive 3D system representation via Blender",
                "Developed a full-stack solution that improves real-time response to equipment failures",
                "First-time experience working with both ML and 3D modeling in a unified platform"
            ],
            "lessons": [
                {
                    "challenge": "Limited real-world HVAC/elevator data",
                    "lesson": "Required use of legacy datasets and extensive cleaning + refinement."
                }
            ],
            "conclusion": "This project enhanced my skills in combining data driven notifications with 3D models."
        }
    }
]